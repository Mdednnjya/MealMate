generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model donations {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id       String?         @db.Uuid
  title         String
  notes         String?
  location      String
  quantity      Int
  expiry_date   DateTime        @db.Timestamptz(6)
  status        String          @default("AVAILABLE")
  image         String?
  type          String
  created_at    DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?       @default(now()) @db.Timestamptz(6)
  profiles      profiles?       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  notifications notifications[]
  requests      requests[]
}

model notifications {
  id          String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id     String?    @db.Uuid
  request_id  String?    @db.Uuid
  donation_id String?    @db.Uuid
  type        String
  message     String
  is_read     Boolean    @default(false)
  created_at  DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at  DateTime?  @default(now()) @db.Timestamptz(6)
  donations   donations? @relation(fields: [donation_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  requests    requests?  @relation(fields: [request_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  profiles    profiles?  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model profiles {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String
  email         String          @unique
  password      String
  phone_number  String
  profile_photo String?
  role          String          @default("USER")
  created_at    DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?       @default(now()) @db.Timestamptz(6)
  donations     donations[]
  notifications notifications[]
  requests      requests[]
}

model requests {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id       String?         @db.Uuid
  donation_id   String?         @db.Uuid
  status        String          @default("PENDING")
  created_at    DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?       @default(now()) @db.Timestamptz(6)
  notifications notifications[]
  donations     donations?      @relation(fields: [donation_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  profiles      profiles?       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum Role {
  USER
  ADMIN
}

enum DonationStatus {
  AVAILABLE
  REQUESTED
  COMPLETED
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
}

enum DonationType {
  FOOD
  DRINK
  MEAL_PACKAGE
}

enum NotificationType {
  EMAIL
  SYSTEM
}
